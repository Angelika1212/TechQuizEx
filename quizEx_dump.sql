--
-- PostgreSQL database dump
--

-- Dumped from database version 16.4
-- Dumped by pg_dump version 16.4

-- Started on 2025-05-22 15:12:30

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- TOC entry 221 (class 1259 OID 71434)
-- Name: achievements; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.achievements (
    achievement_id integer NOT NULL,
    name character varying(255) NOT NULL,
    description character varying(255) NOT NULL,
    image text
);


ALTER TABLE public.achievements OWNER TO postgres;

--
-- TOC entry 220 (class 1259 OID 71433)
-- Name: achievements_achievement_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.achievements_achievement_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.achievements_achievement_id_seq OWNER TO postgres;

--
-- TOC entry 4887 (class 0 OID 0)
-- Dependencies: 220
-- Name: achievements_achievement_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.achievements_achievement_id_seq OWNED BY public.achievements.achievement_id;


--
-- TOC entry 223 (class 1259 OID 71443)
-- Name: incorrect_answers; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.incorrect_answers (
    answer_id integer NOT NULL,
    task_id bigint NOT NULL,
    answer_text text NOT NULL
);


ALTER TABLE public.incorrect_answers OWNER TO postgres;

--
-- TOC entry 222 (class 1259 OID 71442)
-- Name: incorrect_answers_answer_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.incorrect_answers_answer_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.incorrect_answers_answer_id_seq OWNER TO postgres;

--
-- TOC entry 4888 (class 0 OID 0)
-- Dependencies: 222
-- Name: incorrect_answers_answer_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.incorrect_answers_answer_id_seq OWNED BY public.incorrect_answers.answer_id;


--
-- TOC entry 218 (class 1259 OID 71232)
-- Name: joke; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.joke (
    joke_id integer NOT NULL,
    description text NOT NULL,
    image text NOT NULL
);


ALTER TABLE public.joke OWNER TO postgres;

--
-- TOC entry 217 (class 1259 OID 71231)
-- Name: joke_joke_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.joke_joke_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.joke_joke_id_seq OWNER TO postgres;

--
-- TOC entry 4889 (class 0 OID 0)
-- Dependencies: 217
-- Name: joke_joke_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.joke_joke_id_seq OWNED BY public.joke.joke_id;


--
-- TOC entry 219 (class 1259 OID 71242)
-- Name: joke_joke_id_seq1; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.joke ALTER COLUMN joke_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.joke_joke_id_seq1
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 225 (class 1259 OID 71452)
-- Name: level; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.level (
    level_id integer NOT NULL,
    name character varying(255) NOT NULL,
    description character varying(255) NOT NULL,
    subject smallint NOT NULL
);


ALTER TABLE public.level OWNER TO postgres;

--
-- TOC entry 224 (class 1259 OID 71451)
-- Name: level_level_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.level_level_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.level_level_id_seq OWNER TO postgres;

--
-- TOC entry 4890 (class 0 OID 0)
-- Dependencies: 224
-- Name: level_level_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.level_level_id_seq OWNED BY public.level.level_id;


--
-- TOC entry 228 (class 1259 OID 71462)
-- Name: result; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.result (
    level_level_id integer NOT NULL,
    user_user_id integer NOT NULL
);


ALTER TABLE public.result OWNER TO postgres;

--
-- TOC entry 226 (class 1259 OID 71460)
-- Name: result_level_level_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.result_level_level_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.result_level_level_id_seq OWNER TO postgres;

--
-- TOC entry 4891 (class 0 OID 0)
-- Dependencies: 226
-- Name: result_level_level_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.result_level_level_id_seq OWNED BY public.result.level_level_id;


--
-- TOC entry 227 (class 1259 OID 71461)
-- Name: result_user_user_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.result_user_user_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.result_user_user_id_seq OWNER TO postgres;

--
-- TOC entry 4892 (class 0 OID 0)
-- Dependencies: 227
-- Name: result_user_user_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.result_user_user_id_seq OWNED BY public.result.user_user_id;


--
-- TOC entry 216 (class 1259 OID 70856)
-- Name: subject; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.subject (
    subject_id integer NOT NULL,
    name text NOT NULL
);


ALTER TABLE public.subject OWNER TO postgres;

--
-- TOC entry 215 (class 1259 OID 70855)
-- Name: subject_subject_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.subject_subject_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.subject_subject_id_seq OWNER TO postgres;

--
-- TOC entry 4893 (class 0 OID 0)
-- Dependencies: 215
-- Name: subject_subject_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.subject_subject_id_seq OWNED BY public.subject.subject_id;


--
-- TOC entry 236 (class 1259 OID 71615)
-- Name: task; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.task (
    task_id integer NOT NULL,
    correct_answer text NOT NULL,
    description text NOT NULL,
    subject bigint NOT NULL,
    level_id bigint NOT NULL
);


ALTER TABLE public.task OWNER TO postgres;

--
-- TOC entry 235 (class 1259 OID 71614)
-- Name: task_task_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.task_task_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.task_task_id_seq OWNER TO postgres;

--
-- TOC entry 4894 (class 0 OID 0)
-- Dependencies: 235
-- Name: task_task_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.task_task_id_seq OWNED BY public.task.task_id;


--
-- TOC entry 234 (class 1259 OID 71598)
-- Name: user_achievement; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_achievement (
    user_id integer NOT NULL,
    achievement_id integer NOT NULL
);


ALTER TABLE public.user_achievement OWNER TO postgres;

--
-- TOC entry 233 (class 1259 OID 71597)
-- Name: user_achievement_achievements_achievement_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.user_achievement_achievements_achievement_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.user_achievement_achievements_achievement_id_seq OWNER TO postgres;

--
-- TOC entry 4895 (class 0 OID 0)
-- Dependencies: 233
-- Name: user_achievement_achievements_achievement_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.user_achievement_achievements_achievement_id_seq OWNED BY public.user_achievement.achievement_id;


--
-- TOC entry 232 (class 1259 OID 71596)
-- Name: user_achievement_user_user_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.user_achievement_user_user_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.user_achievement_user_user_id_seq OWNER TO postgres;

--
-- TOC entry 4896 (class 0 OID 0)
-- Dependencies: 232
-- Name: user_achievement_user_user_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.user_achievement_user_user_id_seq OWNED BY public.user_achievement.user_id;


--
-- TOC entry 231 (class 1259 OID 71494)
-- Name: user_subject_progress; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_subject_progress (
    user_id integer NOT NULL,
    subject_id integer NOT NULL,
    opened_levels integer DEFAULT 1 NOT NULL
);


ALTER TABLE public.user_subject_progress OWNER TO postgres;

--
-- TOC entry 230 (class 1259 OID 71485)
-- Name: users; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.users (
    user_id integer NOT NULL,
    login character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    opened_levels integer DEFAULT 1 NOT NULL
);


ALTER TABLE public.users OWNER TO postgres;

--
-- TOC entry 229 (class 1259 OID 71484)
-- Name: users_user_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.users_user_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.users_user_id_seq OWNER TO postgres;

--
-- TOC entry 4897 (class 0 OID 0)
-- Dependencies: 229
-- Name: users_user_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.users_user_id_seq OWNED BY public.users.user_id;


--
-- TOC entry 4682 (class 2604 OID 71437)
-- Name: achievements achievement_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.achievements ALTER COLUMN achievement_id SET DEFAULT nextval('public.achievements_achievement_id_seq'::regclass);


--
-- TOC entry 4683 (class 2604 OID 71446)
-- Name: incorrect_answers answer_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.incorrect_answers ALTER COLUMN answer_id SET DEFAULT nextval('public.incorrect_answers_answer_id_seq'::regclass);


--
-- TOC entry 4684 (class 2604 OID 71455)
-- Name: level level_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.level ALTER COLUMN level_id SET DEFAULT nextval('public.level_level_id_seq'::regclass);


--
-- TOC entry 4685 (class 2604 OID 71465)
-- Name: result level_level_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.result ALTER COLUMN level_level_id SET DEFAULT nextval('public.result_level_level_id_seq'::regclass);


--
-- TOC entry 4686 (class 2604 OID 71466)
-- Name: result user_user_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.result ALTER COLUMN user_user_id SET DEFAULT nextval('public.result_user_user_id_seq'::regclass);


--
-- TOC entry 4681 (class 2604 OID 70930)
-- Name: subject subject_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.subject ALTER COLUMN subject_id SET DEFAULT nextval('public.subject_subject_id_seq'::regclass);


--
-- TOC entry 4690 (class 2604 OID 71618)
-- Name: task task_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.task ALTER COLUMN task_id SET DEFAULT nextval('public.task_task_id_seq'::regclass);


--
-- TOC entry 4687 (class 2604 OID 71488)
-- Name: users user_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users ALTER COLUMN user_id SET DEFAULT nextval('public.users_user_id_seq'::regclass);


--
-- TOC entry 4866 (class 0 OID 71434)
-- Dependencies: 221
-- Data for Name: achievements; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.achievements (achievement_id, name, description, image) FROM stdin;
6	Шерлок Холмс	Нашел скрытую кнопку.	\N
7	Знаток матстата	Закрыл все уровни и сдал матстат.	\N
8	Знаток линейной алгебры	Закрыл все уровни и сдал линейную алгебру.	\N
10	Готов к экзамену по матстату	Закрыл все уровни матстата.	\N
11	Готов к экзамену по линейной алгебре	Закрыл все уровни линейную алгебру.	\N
13	Сессия сдана 	Сдал все три экзамена.	\N
12	Готов к экзамену по C/C++	Закрыл все уровни С/С++.	\N
9	Знаток C/C++	Закрыл все уровни и сдал С/С++.	\N
\.


--
-- TOC entry 4868 (class 0 OID 71443)
-- Dependencies: 223
-- Data for Name: incorrect_answers; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.incorrect_answers (answer_id, task_id, answer_text) FROM stdin;
613	1	Произведение всех значений, делённое на их количество
614	1	Среднее геометрическое значение
615	1	Сумма квадратов значений
616	2	Среднее значение в наборе данных
617	2	Минимальное значение в выборке
618	2	Разница между максимальным и минимальным значением
619	3	Среднее значение в выборке
620	3	Наименее часто встречающееся значение
621	3	Разница между максимальным и минимальным значением
622	4	Круговая диаграмма
623	4	Линейный график
624	4	Точечная диаграмма
625	5	Среднее квадратичное отклонение
626	5	Разница между максимальным и минимальным значением
627	5	Среднее значение в выборке
628	6	Квадрат дисперсии
629	6	Сумма квадратов отклонений
630	6	Среднее абсолютное отклонение
631	7	Полный набор изучаемых данных
632	7	Случайно выбранные данные из выборки
633	7	Упорядоченный набор данных
634	8	Часть выборки
635	8	Набор случайных величин
636	8	Выборочное среднее
637	9	Систематическая ошибка
638	9	Ошибка измерения
639	9	Погрешность прибора
640	10	Среднее значение в выборке
641	10	Медиана выборки
642	10	Стандартное отклонение
643	11	Сумма всех значений в выборке
644	11	Среднее значение выборки
645	11	Дисперсия выборки
646	12	Отношение дисперсии к среднему
647	12	Квадрат стандартного отклонения
648	12	Разница между максимальным и минимальным значением
649	13	Правило 3σ
650	13	Значения за пределами среднего
651	13	Все значения больше медианы
652	14	Крутость распределения
653	14	Ширина распределения
654	14	Среднее значение распределения
655	15	Мера симметричности распределения
656	15	Ширина распределения
657	15	Среднее значение распределения
658	16	Тест Стьюдента
659	16	Критерий хи-квадрат
660	16	Анализ ANOVA
661	17	График для средних значений
662	17	Диаграмма рассеяния
663	17	Круговая диаграмма
664	18	Q3 + Q1
665	18	Q2 - Q1
666	18	Q4 - Q3
667	19	(X + μ) / σ
668	19	(X - μ) * σ
669	19	X / σ
670	20	Умножить на среднее и прибавить стандартное отклонение
671	20	Разделить на среднее и вычесть стандартное отклонение
672	20	Возвести в квадрат и разделить на стандартное отклонение
673	21	Число от -1 до 1, характеризующее шанс события
674	21	Отношение благоприятных исходов к неблагоприятным
675	21	Логарифм отношения шансов
676	22	0.5
677	22	1
678	22	Зависит от условий
679	23	0.5
680	23	0
681	23	Зависит от распределения
682	24	Вероятность события A без учёта B
683	24	P(A) + P(B)
684	24	P(A) * P(B)
685	25	P(A|B) = P(A) + P(B)
686	25	P(A|B) = P(A) - P(B)
687	25	P(A|B) = P(A) * P(B)
688	26	События, где P(A|B) = P(B)
689	26	События, где P(A и B) = 0
690	26	События с разными вероятностями
691	27	P(A) * P(B)
692	27	P(A) - P(B)
693	27	MAX(P(A), P(B))
694	28	Распределение с тремя исходами
695	28	Непрерывное распределение на [0,1]
696	28	Распределение для времени между событиями
697	29	n * p
698	29	n / p
699	29	p^n
700	30	Вероятность частых событий
701	30	Распределение для непрерывных величин
702	30	Моделирование больших отклонений
703	31	Функция распределения для непрерывных величин
704	31	Интегральная функция вероятности
705	31	Обратная функция распределения
706	32	Σ x_i / n
707	32	MAX(x_i * P(x_i))
708	32	MIN(x_i * P(x_i))
709	33	P(X ≥ x)
710	33	P(X = x)
711	33	1 - P(X ≤ x)
712	34	1 - p
713	34	p^2
714	34	√p
715	35	n*p
716	35	n/p
717	35	n + p
718	36	Число успехов в n испытаниях
719	36	Время до n-го успеха
720	36	Вероятность одновременных успехов
721	37	Число обычных событий в единицу времени
722	37	Распределение для непрерывных величин
723	37	Моделирование больших отклонений
724	38	Пуассон — частный случай Биномиального при p=0.5
725	38	Биномиальное — предел Пуассона при λ→∞
726	38	Это разные распределения без связи
727	39	Вероятность k успехов в выборке с возвращением
728	39	Распределение для непрерывных величин
729	39	Моделирование времени между событиями
730	40	λ^2
731	40	√λ
732	40	1/λ
733	41	Функция распределения вероятностей
734	41	Обратная функция распределения
735	41	Производная функции распределения
736	42	Разность PDF на границах
737	42	PDF(b) - PDF(a)
738	42	MAX(PDF) на [a, b]
739	43	0.5
740	43	σ√(2π)
741	43	Зависит от параметров
742	44	N(1, 0)
743	44	N(μ, 0)
744	44	Распределение с произвольными параметрами
745	45	Z = X + μ/σ
746	45	Z = X * μ/σ
747	45	Z = (X + μ)/σ
748	46	Сумма зависимых величин стремится к нормальному распределению
749	46	Любое распределение становится нормальным при n→∞
750	46	Выборочное среднее равно генеральному
751	47	Моделирование вероятности событий
752	47	Описание дискретных величин
753	47	Распределение для больших отклонений
754	48	Значение плотности вероятности
755	48	Среднее значение распределения
756	48	Дисперсия распределения
757	49	f(x) = λe^(-λx)
758	49	f(x) = (x-a)/(b-a)
759	49	f(x) = 1/√(2πσ²) * e^(-(x-μ)²/(2σ²))
760	50	λ
761	50	λ^2
762	50	1/λ²
763	51	Точечная оценка параметра
764	51	Медианное значение выборки
765	51	Стандартное отклонение
766	52	Она становится уже
767	52	Она не изменяется
768	52	Зависит от данных
769	53	Нормальное распределение
770	53	Распределение хи-квадрат
771	53	Экспоненциальное распределение
772	54	Она увеличивается с ростом выборки
773	54	Она не зависит от размера выборки
774	54	Она случайно колеблется
775	55	Они дают точное значение параметра
776	55	Они заменяют точечные оценки
777	55	Они используются только для нормальных распределений
778	56	Выборочное среднее является интервальной оценкой
779	56	Выборочная дисперсия оценивает математическое ожидание
780	56	Обе оценки всегда смещённые
781	57	D(a∗)=0
782	57	a∗ стремится к a при n→∞
783	57	a∗ всегда равно a
784	58	Увеличивается
785	58	Не изменяется
786	58	Колеблется случайным образом
787	59	Не может никогда
788	59	Может с вероятностью γ
789	59	Только если выборка мала
790	60	Утверждение о выборке
791	60	Оценка параметров
792	60	Проверка данных на нормальность
793	61	Функция, описывающая дискретные вероятности
794	61	Интеграл от функции распределения
795	61	Обратная функция распределения
796	62	P(X ≥ x)
797	62	P(X = x)
798	62	1 - P(X ≤ x)
799	63	f(x) = λe^(-λx)
800	63	f(x) = 1/(b-a)
801	63	f(x) = (1/σ√(2π)) * e^(-(x-μ)²/σ)
802	64	σ
803	64	σ²
804	64	0
805	65	Z = X * σ + μ
806	65	Z = X / σ * μ
807	65	Z = (X + σ)/μ
808	66	Распределение для больших выборок
809	66	Аналог нормального распределения
810	66	Используется только для дисперсий
811	67	χ² симметричное как нормальное
812	67	Нет различий при больших n
813	67	χ² для непрерывных, нормальное для дискретных
814	68	Для моделирования вероятностей
815	68	Для описания нормальных данных
816	68	Для больших отклонений
817	69	Распределение с пиком в середине
818	69	Распределение с изменяемой плотностью
819	69	Экспоненциально убывающее распределение
820	70	Биномиальное — частный случай нормального
821	70	Нет связи между распределениями
822	70	При малых n биномиальное становится нормальным
823	71	Квадратичную зависимость между переменными
824	71	Степень нелинейной связи
825	71	Разницу между средними
826	72	|r| > 0.3
827	72	|r| > 0.5
828	72	|r| > 0.9
829	73	Разницу между дисперсиями
830	73	Среднее произведение переменных
831	73	Корень из дисперсии
832	74	Нет, нужна большая выборка
833	74	Только если r > 0.5
834	74	Только для нормальных данных
835	75	Корреляция всегда означает причинность
836	75	Если r > 0.7, есть причинность
837	75	При r = 1 есть причинность
838	76	Через z-тест
839	76	Через критерий хи-квадрат
840	76	Через ANOVA
841	77	Доля дисперсии X, объяснённая Y
842	77	Квадрат корреляции Пирсона
843	77	Отношение дисперсий
844	78	Слабая положительная связь
845	78	Нет связи
846	78	Сильная положительная связь
847	79	r = 1
848	79	r = -1
849	79	r = 0.5
850	80	Это причинная связь
851	80	Это функциональная зависимость
852	80	Это разница между средними
853	81	Гипотеза о наличии эффекта
854	81	Альтернативное предположение
855	81	Гипотеза для отклонения
856	82	Гипотеза об отсутствии эффекта
857	82	Основная гипотеза
858	82	Гипотеза по умолчанию
859	83	Вероятность принять H₀ когда она верна
860	83	Вероятность ошибки II рода
861	83	Доверительная вероятность
862	84	< 0.01
863	84	< 0.1
864	84	> 0.05
865	85	Принятие ложной H₀
866	85	Ошибка в измерениях
867	85	Случайная флуктуация
868	86	Ложное отклонение H₀
869	86	Ошибка измерения
870	86	Смещение выборки
871	87	Критерий Уилкоксона
872	87	ANOVA
873	87	Критерий хи-квадрат
874	88	Для параметрических данных
875	88	Для сравнения дисперсий
876	88	Для временных рядов
877	89	Сравнение средних
878	89	Проверка нормальности
879	89	Анализ корреляции
880	90	Вероятность принять H₀
881	90	Уровень значимости
882	90	Доверительный интервал
883	91	Критерий Фишера асимптотический, χ² точный
884	91	Разницы нет, это одно и то же
885	91	χ² для малых, Фишер для больших выборок
886	92	Критерий Шапиро-Уилка
887	92	t-критерий
888	92	Критерий хи-квадрат
889	93	Матрица корреляций
890	93	Матрица средних значений
891	93	Обратная ковариационная матрица
892	94	Это причинная связь
893	94	Это функциональная зависимость
894	94	Это разница между средними
895	95	Нормальное — частный случай биномиального
896	95	Нет связи между распределениями
897	95	При малых n биномиальное становится нормальным
898	96	Она увеличивается с ростом выборки
899	96	Она не зависит от размера выборки
900	96	Она случайно колеблется
901	97	Z = X * σ + μ
902	97	Z = X / σ * μ
903	97	Z = (X + σ)/μ
904	98	Распределение для больших выборок
905	98	Аналог нормального распределения
906	98	Используется только для дисперсий
907	99	Число успехов в n испытаниях
908	99	Время до n-го успеха
909	99	Вероятность одновременных успехов
910	100	Число обычных событий в единицу времени
911	100	Распределение для непрерывных величин
912	100	Моделирование больших отклонений
913	101	Произвольная линия на плоскости
914	101	Число, характеризующее направление
915	101	Точка в пространстве с координатами
916	102	a + b
917	102	max(|a|, |b|)
918	102	a² + b²
919	103	Вектор, все компоненты которого равны 1
920	103	Вектор без определенного направления
921	103	Вектор бесконечной длины
922	104	Сложить их длины
923	104	Перемножить соответствующие координаты
924	104	Найти среднее арифметическое координат
925	105	Сумма длин векторов
926	105	Разность координат векторов
927	105	Вектор, перпендикулярный обоим исходным
928	106	Когда их длины равны
929	106	Когда они параллельны
930	106	Когда один вектор является кратным другому
931	107	Квадратная таблица букв
932	107	Функция от двух переменных
933	107	Множество уравнений
934	108	Умножить на число первую строку
935	108	Возвести каждый элемент в степень числа
936	108	Прибавить число к каждому элементу
937	109	Матрица, состоящая из единиц
938	109	Матрица с нулями на диагонали
939	109	Матрица с одинаковыми элементами
940	110	Поменять местами диагональные элементы
941	110	Умножить матрицу на -1
942	110	Заменить все элементы на обратные
943	111	Сложить диагональные элементы
944	111	Перемножить соответствующие элементы
945	111	Сложить определители матриц
946	112	Матрицы должны быть квадратными
947	112	Число строк A = числу столбцов B
948	112	Матрицы должны быть симметричными
949	113	Поэлементное умножение
950	113	Скалярное произведение столбцов A и v
951	113	Взять диагональные элементы A и умножить на v
952	114	Произведение диагональных элементов
953	114	Максимальный элемент матрицы
954	114	Сумма всех элементов матрицы
955	115	a + d - b - c
956	115	a*d + b*c
957	115	(a + d)/(b + c)
958	116	Матрица с нулевыми диагональными элементами
959	116	Матрица с одинаковыми строками
960	116	Матрица, не имеющая транспонированной
961	117	Поменять местами a и d, изменить знак det
962	117	Умножить матрицу на det
963	117	Транспонировать матрицу и разделить на det
964	118	Матрица с нулями на диагонали
965	118	Матрица с единицами вне диагонали
966	118	Матрица, все элементы которой равны
967	119	Возвести каждый элемент в степень
968	119	Умножить матрицу на скалярную величину степени
969	119	Вычислить произведение диагональных элементов
970	120	Матрица, у которой det = 1
971	120	Матрица с положительными элементами
972	120	Матрица, обратная самой себе
973	121	Совокупность линейных неравенств
974	121	Набор векторных уравнений
975	121	Система дифференциальных уравнений
976	122	Метод Ньютона, метод хорд
977	122	Разложение в ряд Тейлора
978	122	Интегрирование по частям
979	123	Когда ранг матрицы равен 0
980	123	Когда свободные члены равны 0
981	123	Когда число уравнений больше числа неизвестных
982	124	Матрица без свободных членов
983	124	Обратная матрица коэффициентов
984	124	Матрица, приведенная к диагональному виду
985	125	Выразить одну переменную через другие
986	125	Привести к диагональному виду
987	125	Вычислить определитель матрицы
988	126	Минор, содержащий свободные члены
989	126	Минор минимального порядка
990	126	Минор, равный определителю матрицы
991	127	Критерий существования обратной матрицы
992	127	Условие диагонализируемости матрицы
993	127	Теорема о ранге матрицы
994	128	Частное решение системы
995	128	Набор свободных переменных
996	128	Случайная комбинация решений
997	129	Число ненулевых столбцов
998	129	Максимальный элемент матрицы
999	129	Количество отрицательных элементов
1000	130	Когда определитель равен 1
1001	130	Когда число уравнений меньше числа неизвестных
1002	130	Когда матрица симметрична
1003	131	Множество с операцией умножения векторов
1004	131	Пространство с заданной метрикой
1005	131	Множество замкнутое относительно интегрирования
1006	132	Пространство непрерывных функций
1007	132	Множество всех действительных чисел
1008	132	Пространство квадратных матриц с det=1
1009	133	Множество произведений векторов
1010	133	Пересечение всех подпространств
1011	133	Объединение всех подпространств
1012	134	Когда их сумма равна 0
1013	134	Когда они параллельны
1014	134	Когда один вектор можно получить вращением другого
1015	135	Минимальное подпространство, содержащее векторы
1016	135	Набор векторов, задающих координаты
1017	135	Множество всех векторов пространства
1018	136	Найти проекции на оси координат
1019	136	Разделить координаты на длину вектора
1020	136	Умножить вектор на матрицу перехода
1021	137	Биективное отображение, сохраняющее норму
1022	137	Отображение, сохраняющее скалярное произведение
1023	137	Взаимно однозначное соответствие базисов
1024	138	Число ненулевых векторов
1025	138	Максимальная длина вектора
1026	138	Количество координат в пространстве
1027	139	Любое подмножество векторного пространства
1028	139	Множество, замкнутое относительно умножения
1029	139	Пересечение двух пространств
1030	140	Проверить наличие нулевого вектора
1031	140	Убедиться в замкнутости относительно нормы
1032	140	Проверить линейную независимость любого подмножества
1033	141	Отображение, сохраняющее скалярное произведение
1034	141	Функция, заданная полиномом
1035	141	Биективное отображение пространства
1036	142	Возвести матрицу в степень оператора
1037	142	Найти обратную матрицу
1038	142	Вычислить след матрицы
1039	143	Множество векторов с одинаковым образом
1040	143	Образ оператора при отображении
1041	143	Множество собственных векторов
1042	144	Ядро оператора
1043	144	Множество прообразов нулевого вектора
1044	144	Ортогональное дополнение ядра
1045	145	Вектор, сохраняющий направление
1046	145	Вектор, переходящий в нулевой
1047	145	Вектор, ортогональный своему образу
1048	146	Решить систему Av = v
1049	146	Найти det(A)
1050	146	Вычислить ранг матрицы A
1051	147	Многочлен от следа матрицы
1052	147	Характеристики матрицы оператора
1053	147	Многочлен, задающий оператор
1054	148	Когда все собственные значения различны
1055	148	Когда оператор симметричен
1056	148	Когда матрица оператора треугольная
1057	149	Диагональная форма с элементами 0 и 1
1058	149	Треугольная форма матрицы
1059	149	Канонический вид оператора
1060	150	Оператор с нулевым следом
1061	150	Оператор, меняющий направление векторов
1062	150	Оператор, сохраняющий длину векторов
1063	151	Пространство с заданной метрикой
1064	151	Множество векторов с целыми координатами
1065	151	Пространство над полем комплексных чисел
1066	152	Сумма координат вектора
1067	152	Максимальная по модулю координата
1068	152	Расстояние до ближайшего вектора
1069	153	Базис из векторов единичной длины
1070	153	Базис, содержащий нулевой вектор
1071	153	Базис с попарно параллельными векторами
1072	154	Метод решения СЛАУ
1073	154	Алгоритм нахождения определителя
1074	154	Способ диагонализации матрицы
1075	155	Множество векторов, параллельных подпространству
1076	155	Объединение всех ортогональных подпространств
1077	155	Ядро линейного оператора
1078	156	Умножить вектор на матрицу проекций
1079	156	Найти разность векторов
1080	156	Вычислить скалярное произведение
1081	157	Вещественное пространство с симметричной формой
1082	157	Пространство с антисимметричным произведением
1083	157	Пространство над конечным полем
1084	158	Задать произведение как сумму координат
1085	158	Использовать кососимметричную форму
1086	158	Определить произведение через векторное произведение
1087	159	Неравенство для сумм векторов
1088	159	Оценка для определителя матрицы
1089	159	Условие ортогональности векторов
1090	160	arcsin((x,y)/(||x||·||y||))
1091	160	arctg(||x||/||y||)
1092	160	Определяется через векторное произведение
1093	161	Многочлен первой степени
1094	161	Функция, заданная произведением координат
1095	161	Отображение пространства в себя
1096	162	xAxᵀ
1097	162	x·A·x в смысле скалярного произведения
1098	162	A·x как матричное умножение
1099	163	Вид с нулевыми коэффициентами
1100	163	Сумма кубов координат
1101	163	Произведение координат
1102	164	Приведение к треугольному виду
1103	164	Использование метода Гаусса
1104	164	Диагонализация матрицы формы
1105	165	Число положительных коэффициентов
1106	165	Разность между максимальным и минимальным коэффициентом
1107	165	Сумма всех коэффициентов
1108	166	Сигнатура зависит от базиса
1109	166	Число нулевых коэффициентов инвариантно
1110	166	Ранг формы может меняться
1111	167	Когда все коэффициенты положительны
1112	167	Когда форма принимает только нулевые значения
1113	167	Когда ранг формы максимален
1114	168	Отрицательность всех миноров
1115	168	Равенство нулю всех миноров
1116	168	Чередование знаков миноров
1117	169	Функция, квадратичная по каждому аргументу
1118	169	Симметричная линейная функция
1119	169	Отображение в поле скаляров
1120	170	B(x,y) = Q(x) + Q(y)
1121	170	Q(x) = B(x,y) для некоторого y
1122	170	Билинейные формы - это частный случай квадратичных
1123	171	Пространство с заданным скалярным произведением
1124	171	Множество векторов с нормированной длиной
1125	171	Пространство над конечным полем
1126	172	Две точки и направление
1127	172	Три неколлинеарные точки
1128	172	Базис и точка начала отсчета
1129	173	Отображение, сохраняющее расстояния
1130	173	Линейное отображение между пространствами
1131	173	Биективное отображение, сохраняющее углы
1132	174	Линейная оболочка точек
1133	174	Пересечение всех подпространств, содержащих точки
1134	174	Объединение отрезков между точками
1135	175	Минимальное аффинное подпространство
1136	175	Набор всех барицентрических комбинаций
1137	175	Пересечение выпуклых множеств
1138	176	Проверить линейную независимость точек
1139	176	Убедиться в замкнутости относительно нормы
1140	176	Проверить наличие нулевой точки
1141	177	Выпуклый многоугольник
1142	177	Пересечение гиперплоскостей
1143	177	Множество решений системы уравнений
1144	178	Найти координаты в базисе
1145	178	Решить систему неравенств
1146	178	Вычислить расстояния до вершин
1147	179	Группа линейных преобразований
1148	179	Множество всех движений пространства
1149	179	Совокупность проективных преобразований
1150	180	Аффинное преобразование с det=1
1151	180	Преобразование, сохраняющее ориентацию
1152	180	Линейное изометрическое отображение
1153	181	Обобщение понятия функции
1154	181	Линейный оператор специального вида
1155	181	Дифференциальная форма
1156	182	Элемент пространства V ⊗ W
1157	182	Объект, заданный в локальных координатах
1158	182	Элемент внешней алгебры
1159	183	Суммирование по всем индексам
1160	183	Перемножение компонент тензора
1161	183	Дифференцирование тензора
1162	184	Покомпонентное умножение
1163	184	Свертка тензоров
1164	184	Внешнее произведение
1165	185	Тензор, диагональный в некотором базисе
1166	185	Тензор с нулевым следом
1167	185	Тензор, коммутирующий со всеми другими
1168	186	Тензор с попарно различными компонентами
1169	186	Тензор, инвариантный относительно сдвига
1170	186	Тензор, сохраняющий ориентацию
1171	187	Тензор, задающий скалярное произведение
1172	187	Тензор кривизны пространства
1173	187	Тензор энергии-импульса
1174	188	Тензор, характеризующий топологию
1175	188	Тензор, описывающий градиент функции
1176	188	Тензор, задающий связность
1177	189	Использование символов Кронекера
1178	189	Перестановка индексов местами
1179	189	Дифференцирование по координатам
1180	190	Тензор, задающий ориентацию
1181	190	Антисимметричный тензор ранга 2
1182	190	Тензор, используемый в алгебре Ли
1183	191	Сжатие изображений
1184	191	Распознавание образов
1185	191	Генерация случайных чисел
1186	192	Кластеризация данных
1187	192	Регрессионный анализ
1188	192	Обучение с подкреплением
1189	193	Описание волновых функций
1190	193	Матрица плотности
1191	193	Уравнение Шрёдингера
1192	194	Хеш-функции
1193	194	Симметричное шифрование
1194	194	Эллиптические кривые
1195	195	Анализ временных рядов
1196	195	Оптимизация портфеля
1197	195	Теория аукционов
1198	196	Дифференциальные игры
1199	196	Кооперативные игры
1200	196	Позиционные игры
1201	197	Механика сплошных сред
1202	197	Квантовая электродинамика
1203	197	Теория струн
1204	198	Доверительные интервалы
1205	198	Проверка гипотез
1206	198	Факторный анализ
1207	199	Циклические коды
1208	199	Коды Хэмминга
1209	199	Избыточное кодирование
1210	200	Обработка сигналов
1211	200	Компьютерное зрение
1212	200	Нейронные сети
1213	201	Уменьшает значение переменной на 1
1214	201	Умножает значение переменной на 2
1215	201	Возвращает адрес переменной
1216	202	integer x;
1217	202	var x;
1218	202	x = int;
1219	203	2.5
1220	203	3
1221	203	Ошибка компиляции
1222	204	string
1223	204	character
1224	204	symbol
1225	205	Присваивает значение
1226	205	Проверяет тип переменной
1227	205	Сравнивает адреса переменных
1228	206	read(x);
1229	206	scanf("%f", x);
1230	206	input >> x;
1231	207	Функция для вывода текста
1232	207	Макрос препроцессора
1233	207	Имя переменной
1234	208	constant int x = 5;
1235	208	final int x = 5;
1236	208	#define x 5
1237	209	Hello World
1238	209	Hello world
1239	209	Ошибка компиляции
1240	210	/
1241	210	mod
1242	210	rem
1243	211	Создает цикл
1244	211	Объявляет переменную
1245	211	Импортирует библиотеку
1246	212	123
1247	212	0123
1248	212	3
1249	213	exit;
1250	213	return;
1251	213	stop;
1252	214	Создает функцию
1253	214	Объявляет массив
1254	214	Работает как цикл
1255	215	AND
1256	215	&
1257	215	and
1258	216	Hi
1259	216	Бесконечный цикл
1260	216	Ошибка компиляции
1261	217	skip;
1262	217	next;
1263	217	break;
1264	218	Оператор сравнения
1265	218	Оператор выбора из трех вариантов
1266	218	Битовый оператор
1267	219	OR
1268	219	|
1269	219	or
1270	220	while
1271	220	for
1272	220	repeat-until
1273	221	array arr[10];
1274	221	int arr = [10];
1275	221	arr[10] int;
1276	222	length(str);
1277	222	str.length();
1278	222	sizeof(str);
1279	223	Символ перевода строки
1280	223	Пробел
1281	223	Точка
1282	224	str = str2;
1283	224	copy(str1, str2);
1284	224	str.clone(str2);
1285	225	1
1286	225	[2]
1287	225	Ошибка компиляции
1288	226	int arr[3,3];
1289	226	array arr[3][3];
1290	226	int arr(3)(3);
1291	227	str == str2
1292	227	str.equals(str2);
1293	227	compare(str1, str2);
1294	228	Примитивный тип строки
1295	228	Макрос для работы со строками
1296	228	Функция для конкатенации
1297	229	atoi(str);
1298	229	int.parse(str);
1299	229	convert.to_int(str);
1300	230	Создает копию строки
1301	230	Объявляет массив символов
1302	230	Ошибка компиляции
1303	231	Переменная для хранения типа данных
1304	231	Функция для выделения памяти
1305	231	Оператор сравнения
1306	232	*x
1307	232	x->
1308	232	x.address()
1309	233	Адрес переменной x
1310	233	0
1311	233	Случайное значение
1312	234	Изменение адреса указателя
1313	234	Освобождение памяти
1314	234	Приведение типа указателя
1315	235	int* ref = &x;
1316	235	ref int = x;
1317	235	int ref = x;
1318	236	Память в стеке
1319	236	Статическая память
1320	236	Кэш-память процессора
1321	237	delete(ptr);
1322	237	remove(ptr);
1323	237	ptr.free();
1324	238	Недостаток памяти
1325	238	Повреждение памяти
1326	238	Использование неинициализированной памяти
1327	239	Ссылка требует разыменования
1328	239	Указатель не может быть null
1329	239	Это одно и то же
1330	240	Создает новый тип данных
1331	240	Инициализирует переменную нулем
1332	240	Освобождает память
1333	241	function int func(x)
1334	241	def func(int x)
1335	241	func(int x) -> int
1336	242	Аргумент без типа
1337	242	Аргумент, который нельзя изменить
1338	242	Аргумент, передаваемый по ссылке
1339	243	void f(int arr[])
1340	243	void f(int arr[10])
1341	243	void f(array arr)
1342	244	Циклический вызов функций
1343	244	Оптимизация кода компилятором
1344	244	Способ обработки исключений
1345	245	3
1346	245	9
1347	245	Бесконечная рекурсия
1348	246	Использовать глобальные переменные
1349	246	Вернуть массив
1350	246	Нельзя вернуть несколько значений
1351	247	Изменение имени функции
1352	247	Функция с переменным числом аргументов
1353	247	Динамическое связывание
1354	248	Функция без параметров
1355	248	Функция, которая ничего не возвращает
1356	248	Функция, работающая только с числами
1357	249	void f(int* x);
1358	249	void f(int x);
1359	249	void f(const int x);
1360	250	Функция без return
1361	250	Функция, вызываемая только один раз
1362	250	Функция, не имеющая побочных эффектов
1363	251	class S { int x; };
1364	251	S struct { int x; };
1365	251	struct { int x; } S;
1366	252	То же, что и структура
1367	252	Макрос для создания типов
1368	252	Функция-конструктор
1369	253	В class поля по умолчанию public
1370	253	Ничем не отличаются
1371	253	struct не может иметь методы
1372	254	Метод для уничтожения объекта
1373	254	Функция для освобождения памяти
1374	254	Оператор перегрузки
1375	255	~ClassName {};
1376	255	destructor ClassName();
1377	255	void ~ClassName();
1378	256	Наследование свойств
1379	256	Полиморфизм
1380	256	Абстракция
1381	257	s->x;
1382	257	s[x];
1383	257	x of s;
1384	258	Указатель на базовый класс
1385	258	Ссылка на родительский объект
1386	258	Константа класса
1387	259	const int x;
1388	259	int static x;
1389	259	int x static;
1390	260	Функция внутри класса
1391	260	Статическая функция
1392	260	Виртуальная функция
1393	261	Создание копии класса
1394	261	Изменение поведения методов
1395	261	Инкапсуляция данных
1396	262	class Derived extends Base
1397	262	class Derived : Base
1398	262	class Derived inherits Base
1399	263	Множественное наследование
1400	263	Перегрузка операторов
1401	263	Шаблонное программирование
1402	264	Для создания абстрактных классов
1403	264	Для ускорения работы программы
1404	264	Для работы с указателями
1405	265	Класс без полей
1406	265	Класс только со статическими методами
1407	265	Класс, который нельзя наследовать
1408	266	abstract
1409	266	sealed
1410	266	private
1411	267	Наследование от абстрактного класса
1412	267	Наследование интерфейсов
1413	267	Иерархия из одного класса
1414	268	super.method();
1415	268	this.method();
1416	268	parent.method();
1417	269	Класс только с реализованными методами
1418	269	Шаблон класса
1419	269	Базовый класс
1420	270	Запрещает переопределение метода
1421	270	Позволяет множественное наследование
1422	270	Делает метод статическим
1423	271	Математический вектор
1424	271	Умный указатель
1425	271	Потокобезопасный массив
1426	272	v.add(x);
1427	272	v.insert(x);
1428	272	v.append(x);
1429	273	Хранит только уникальные элементы
1430	273	Односвязный список
1431	273	Динамический массив
1432	274	v.sort();
1433	274	sort(v);
1434	274	v.order();
1435	275	Указатель на элемент
1436	275	Функция для обхода контейнера
1437	275	Тип данных для индексации
1438	276	v.search(x);
1439	276	v.contains(x);
1440	276	find(x, v);
1441	277	Указатель на функцию
1442	277	Шаблон функции
1443	277	Функция без имени
1444	278	Указатель с подсчетом ссылок
1445	278	Указатель для работы с файлами
1446	278	Указатель на массив
1447	279	Контейнер для трех элементов
1448	279	Шаблон для сравнения
1449	279	Функция объединения
1450	280	string s = new String();
1451	280	char* s;
1452	280	String s;
1453	281	std::create_thread(func);
1454	281	Thread t = new Thread(func);
1455	281	thread_start(func);
1456	282	Отсутствие потоков
1457	282	Утечка памяти в потоке
1458	282	Превышение лимита потоков
1459	283	std::lock(m);
1460	283	m.lock();
1461	283	lock_guard(m);
1462	284	Создает promise/future пару
1463	284	Запускает поток в фоновом режиме
1464	284	Синхронизирует потоки
1465	285	Условный оператор
1466	285	Переменная для синхронизации
1467	285	Блокировка для чтения/записи
1468	286	Через глобальные переменные
1469	286	t.send(arg);
1470	286	Нельзя передавать данные в поток
1471	287	Конфликт типов данных
1472	287	Использование устаревших функций
1473	287	Несовместимость потоков
1474	288	future.result();
1475	288	future.wait();
1476	288	future.value();
1477	289	Указатель на мьютекс
1478	289	Автоматический lock при создании
1479	289	Потокобезопасный контейнер
1480	290	t.stop();
1481	290	t.terminate();
1482	290	t.kill();
1483	291	Макросы препроцессора
1484	291	Комментарии в коде
1485	291	Специальные классы
1486	292	Перемещает объект в другую память
1487	292	Изменяет тип объекта
1488	292	Копирует объект
1489	293	Оптимизация циклов
1490	293	Передача по значению
1491	293	Шаблонный вывод типов
1492	294	Константная функция
1493	294	Функция времени выполнения
1494	294	Условная компиляция
1495	295	Resource Allocation and Initialization Interface
1496	295	Random Access and Iteration Interface
1497	295	Runtime Application Instrumentation Interface
1498	296	Для работы с переменным числом аргументов
1499	296	Для инициализации указателей
1500	296	Для создания списков инициализации
1501	297	Simple Function Inlining and Annotation Extension
1502	297	Standard Function Implementation and Annotation
1503	297	System Function Integration and Application
1504	298	Шаблон для наследования
1505	298	Динамический массив типов
1506	298	Безопасный указатель
1507	299	Управление стеком вызовов
1508	299	Распределение памяти по секциям
1509	299	Интерфейс для работы с кучей
1510	300	Запрещает оптимизацию
1511	300	Указывает на отсутствие возвращаемого значения
1512	300	Запрещает вызов функции из других потоков
\.


--
-- TOC entry 4863 (class 0 OID 71232)
-- Dependencies: 218
-- Data for Name: joke; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.joke (joke_id, description, image) FROM stdin;
1	 \n— Прошу прощенья, сэр, вы в последнее время стали часто нарушать наши обычаи. Команда имеет право собраться и поговорить!\n— Согласно обычаю.\n— На сходку!\n— Таков закон. Ха-ха-ха…	/images/image9.gif
20	Имею я пирожных горы, \nИ есть, что есть, и есть, что пить, \nНо крашу, крашу я заборы, \nЧтоб тунеядцем не прослыть!	/images/image18.jpg
2	Надеюсь, все в порядке? Шхуна готова к отплытию?\n\n- Не понял, сэр? А, да!\n\nВот что, сэр! Я буду говорить с Bами откровенно.\n\nМне не нравится эта экспедиция, мне не нравятся эти матросы.\n\nИ, вообще... Что? Да! Нет, мне вообще ничего не нравится, сэр!\n\n- И это все? - Не понял, сэр? А, да! Нет, не все!\n\nХоть я и капитан, но я не спрашиваю Bас о цели нашего путешествия.\n\nОднако, самый последний матрос знает, что мы едем искать сокровища!\n\nНе нравится мне все это, сэр!	/images/image8.jpeg
3	Мы найдем эти сокровища, мы сможем купаться в деньгах и швырять их в море!\n\n- Ха-ха-ха! Трелони, я могу поехать с Bами.\n\nHо есть человек, на которого, в этом предприятии, я боюсь положиться.\n\n- Кто он? Назовите этого негодяя, сэр!\n\n- Вы, Трелони! Вы не умеете держать язык за зубами.\n\n- Ну, Ливси, отныне я буду нем, как могила! - Ха-ха! Прекрасно! В Бристоль, друзья!	/images/image7.jpg
4	- Любезнейший! Мы отправляемся за сокровищами.\n\nНам нужен хороший корабль и команда.\n\n- Сэр! У меня есть и то, и другое. - Ну и прекрасно!\n\nНу-ка, взгляните на нашу красавицу. Нам чертовски повезло!\n\nВсе, буквально все, едва заслышав, что мы отправляемся за сокровищами...\n\n...из-за всех сил стараются нам помочь!\n\n- Ха-ха-ха! О! Он все-таки всем разболтал. Ну и Трелони!	/images/image6.png
5	- Эй, Пью! Здесь, кажется, уже кто-то побывал!\n\n- Сундук! - Сундук открыт!\n\n- А карта на месте?\n\n- Деньги! - Деньги! Деньги!\n\n- К черту деньги. Я говорю о бумагах Флинта.\n\n- Бумаг не видать!\n\n- Ничего нет! - Нету!	/images/image5.gif
6	 \n— О, увеличенная… печень, печень… увеличенная… селезёночка… \nАритмия… Замечательно! Какая прелесть!\n— Где Чёрный Пёс?\n— Успокойтесь! Здесь нет никаких собак.	/images/image10.gif
7	Ром, свиная грудинка, яичница - вот все, что мне нужно!\n\nПодойди-ка сюда, мальчик!\n\nКогда увидишь моряка на одной ноге - сразу мчи ко мне!\n\nЗа это будешь получать по пять... по четыре... - aп-чхи!\n\nПо три! По три пенса серебром. Но зато за каждый месяц.\n\nТак что, смотри в оба!\n\n- Слушаюсь, сэр. - Хороший мальчик!\n\nХор... Хорош... Хо... Хо... Хороший ... Ап-чхи!	/images/image3.gif
8	 \n— Билли! Разве ты не узнаёшь меня, Билли? Не узнаёшь своего старого товарища?!\n— Ап-чхи! Ап-чхи! (часы ломаются) Ап… Чёрный… Пёс?!\n— Хе, он самый! Вот захотелось проведать своего старого корабельного друга!\n— Ладно, раз уж выследил… (пьёт ром) Говори скорее: зачем пришёл!\n— Где карта, Билли? Нам нужна карта!\n— Какая карта?! У меня нет никакой карты!\n— Где карта?!\n— У меня нет никакой карты! Нет!.. Нет! Не дам! А… А… А… ПЧХИ!!!	/images/image2.gif
9	 -А! Вот они идут. Внимание! Приготовиться.... Оооогонь!	/images/image1.gif
10	— Сколько же на корабле верных нам людей?\n— Нас семеро! Вместе с Джимом!\n— Ха-ха-ха-ха! Против девятнадцати.\n— Я буду драться за двоих! Нет, за четверых!\nЗа двенадцать! За три… з-з-за… Разрешите идти, сэр, выполнять долг?!\n— ....\n— Есть, сэр! Кру-гом! Шагом марш!\nАть-два, ать-два, ать-два, ать-два…\n	/images/firstJoke.png
11	Я коронован, рядом Забава,\nНовые земли, новая слава,\nНовые деньги, новые связи,\nВот оно счастье — в князи из грязи.	/images/image13.jpg
12	Шла лесною стороной, увязался черт за мной. \nДумала: мужчина. Что за чертовщина?! \nПовернула я домой, снова черт идет за мной, \nплюнула на плешь ему и послала к лешему!	/images/image11.gif
13	- Я выйду замуж только за того , кто построит летучий корабль!\n- Построишь?\n- Куплю.	/images/image14.jpg
14	Эх, жизнь моя, жестянка!\nА ну её в болото!\nЖиву я как поганка,\nА мне летать, а мне летать,\nА мне летать охота!\n	/images/image12.gif
15	А того великана я знал, он у меня пастухом служил. \nДа только вот беда: на прошлой неделе пил он воду \nиз этой чашки, поскользнулся, упал в неё и… утонул! \nТри дня искали – не нашли. Видно в море унесло..	/images/image15.png
16	— Слова я знаю заветные, без них не полетишь.\n— Какие ещё слова?\n—Земля, прощ…\n— Прощай, дурень!	/images/image4.jpg
17	 — Во-первых, пирожных! Во-вторых… \nВы, чего, и пальцы за меня загибать будете?\n— Ага!\n— Во-вторых, конфет! \nВ-третьих… ну, загибайте, загибайте! А в-третьих, мороженого…	/images/image22.gif
18	— Вот тебе и пирожки!\n— Чё это такое-то? Чёрное…\n — Ну чего морщишься? Сам испёк — сам и кушай!\n— Эт чё это, пирожки?! \nНет, спасибо, это мне, знаете, никак не хочется!	/images/image21.gif
19	— Золотая рыбка! Значит, так, золотая рыбка: я хочу, чтобы ты…\n— Что?! А ты сплёл невод? \nА ты его трижды закинул в море? \nА ты меня поймал?! \nПалец о палец не ударил, а туда же — я хочу. Хм!	/images/image16.png
21	Рассказчик: Ну, Мартынку отчего ж не сыграть, коль игра? \nМожно. А государь-анператор тем часом жили спокойно, с дочкой Раиской чай пили.\nГенерал: Ваше императорство, какой-то мурло всех господ в карты раздеват.\nЦарь: Ета каак?!	/images/image24.jpg
22	Король:\nСостоянье у тебя истерическое.\nСкушай, доченька, яйцо диетическое!\nИли, может, обратимся к врачу?\nПринцесса:\nНичего я не хочу!\nКороль:\nАх, Принцессочка моя горемычная,\nСкоро будут здесь певцы заграничные.\nВыбирай любого — всё оплачу!\nПринцесса:\nНичего я не хочу!	/images/image25.jpg
23	Я — Гениальный Сыщик,\nМне помощь не нужна!\nНайду я даже прыщик\nНа теле у слона!\nКак лев, сражаюсь в драке.\nТружусь я, как пчела.\nА нюх как у собаки.\nА глаз как у орла!\nРуки моей железной\nБоятся, как огня.\nИ в общем, бесполезно\nСкрываться от меня.\nПроворнее макаки.\nВыносливей вола.\nА нюх как у собаки.\nА глаз как у орла!	/images/image28.jpg
24	Бывал я в разных странах\nИ если захочу,\nТо поздно или рано\nЯ всех разоблачу!\nКак мышь, крадусь во мраке\nПлыву, как камбала.\nА нюх как у собаки,\nА глаз как у орла!	/images/image31.png
25	Куда идёт Король — большой секрет.\nА мы всегда идём ему вослед.\nВеличество должны мы уберечь\nОт всяческих ему ненужных встреч.\nОх, рано встаёт охрана!\nЕсли близко воробей,\nМы готовим пушку!\nЕсли муха — муху бей!\nВзять её на мушку!	/images/image30.jpg
26	Как известно, мы народ горячий!\nИ не выносим нежностей телячьих.\nЛюбим мы зато телячьи туши,\nЛюбим бить людей и бить баклуши!\nМы ррраз-бо-бо-ой-ойники!\nРазбойники! Разбойники!\nПиф-паф! И вы — покойники!\nПокойники! Покойники!\nПиф-паф! И вы — покойники!\nПокойники! Покойники!	/images/image26.jpeg
27	Говорят, мы бяки-буки...    \nКак выносит нас земля!\nДайте, что ли, карты в руки –\nПогадать на Короля!\nО ля-ля! О ля-ля!\nПогадать на Короля!\nЗавтра дальняя дорога\nВыпадает Королю.\nУ него деньжонок много,\nА я денежки люблю!\nУ-лю-лю! У-лю-лю!\nА я денежки люблю!	/images/image27.jpg
28	Пусть нету ни кола и ни двора,\nЗато не платят Королю налоги\nРаботники ножа и топора,\nРомантики с большой дороги.\nНе желаем жить по-другому!\nХодим мы по краю... родному!\nПрохожих ищем с ночи до утра.\nЧужие сапоги натёрли ноги\nРаботникам ножа и топора,\nРомантикам с большой дороги!	/images/image29.png
29	В море ветер, в море буря\nВ море воют ураганы\nВ синем море тонут лодки\nИ большие корабли, ха-ха-ха\nКорабли на дно уходят\nС якорями, с парусами\nНа морской песок роняя\nЗолотые сундуки,\nЗолотые сундуки.\nКорабли лежат разбиты,\nСундуки стоят раскрыты\nИзумруды и рубины осыпаются на дно\nЕсли хочешь быть богатым,\nЕсли хочешь быть счастливым\nОставайся мальчик с нами -\nБудешь нашим королём,\nБудешь нашим королём...\nЛа-ла-ла ла-ла-ла ла-ла-ла-лэ-ла-ла-ла\nЛа-ла-лэ-ла ла-ла-ла-ла-ла-лэй\nЛа-ла-ла ла-ла-ла ла-ла-ла-лэ-ла-ла-ла\nЛа-ла-лэ-ла ла-ла-ла-ла-ла-лэй	/images/image32.jpg
30	― Отпусти меня домой, к деду, проклятый колдун!\n― Глупый мальчишка!!! Я научу тебя делать бури, топить корабли.\n― Там же люди!!!\n― Эй... Зато всё это будет твоим!\n― Нет!\n― Ты будешь богат и счастлив! Ты проживешь две тысячи лет!\n― Две тысячи лет топить корабли?\n― А лет через триста, ну, когда подрастёшь, \nя женю тебя на моей дочке!	/images/image33.png
31	— И потом, я ведь не всамделишный Царь-то, я – сказочный. \nДай, думаю, пока сказки на полке стоят, забор подкрашу. \nИ польза, и разминка. Одобряешь? \n— Нет. Ничего вы не понимаете в царской жизни! \nЦарь! Ха! Хочешь – пирожное, хочешь – мороженое… \nА он, ха-ха, заборы красит!	/images/image19.png
32	— Ну чего оно не рубится? Ладно, и так сойдет! \nСейчас, как я все это замесю... Это че это, тесто? Че оно такое липкое?\n Ну ладно, зажарится как-нибудь! \n — Апхчи! Вот тебе и пирожки! \n — Че это такое-то? Черное... \n — Ну, чего морщишься? Сам испек, сам и кушай! \n — Это чего? Это пирожки? Нет, спасибо, мне, знаете, как-то не хочется. 	/images/image17.jpg
33	— Эй, вы кто такие? \n— Мы Василисы Премудрые. \n— Кто?! — Василисы Премудрые!\n— А вы откуда взялись? \n— Прилетели из разных сказок. \n— Потому что у нас слет юных Василис по обмену премудростями. \n— Чем?! \n— Премудростями! \n— А... Эх, вот бы мне бы тоже бы научиться по \nобмену какими-нибудь премудростями...	/images/image20.png
34	– Вы чего смеётесь-то? Надо мною? Думаете, я ничего не умею, прям как вы? \n– Ага.\n– Ну, уж нет. Жалко, что у меня нету инструментов. \n– Ну, это можно. \n– Это чего? Инструменты? Ага! Хорошо! \nКак захочу, так всё сделаю – хоть кадушку,хоть корыто!	/images/image23.gif
35	― Послушай, добрый человек, отпусти меня домой в море!\n― Ух ты, говорящая рыба!\n― А у нас вся семья говорящая: отец говорит, мать говорит,\nа дед говорит: Делай добро, бросай его в воду. Оно не пропадёт, \nдобром к тебе вернётся. Ну, сделай добро! \nБрось меня в воду! А за мной не пропадёт. \nКогда-нибудь и я тебе пригожусь.	/images/image34.gif
36	Телевизор: Внимание, всем постам ГАИ! Задержать белые Жигули»! \nБудьте осторожны — преступник вооружён!\nВовка: Кеша, сделай, пожалуйста, потише! \nКеша, ты меня слышишь?\nКеша: Во-первых, не Кеша, а Иннокентий, \nа во-вторых, преступник вооружён!	/images/image35.png
37	Э, прилетаю я как-то на Таити… Вы не были на Таити? \nНу так вот. А майор Томин мне и говорит: \nСберкассу ограбила пани Моника из кулинарного техникума. Пропало… \nМиллион, миллион, миллион алых роз… \nА я ему и говорю: Шурик, будьте осторожны — преступник вооружён!.\nА он мне: В греческом зале, в греческом зале… мышь белая...	/images/image34.jpg
38	― Слушай, ты же забыл варенье!\n― Да нет, я взял, взял!\n― Взял...	/images/image44.jpg
39	― Простите, у вас можно тут приземлиться?\n― Че... чего?\n― Ну что-что, посадку давай! Ты что, не видишь - ослабеваю...\n― Садитесь, пожалуйста.	/images/image41.png
40	― Так. Продолжаем разговор. Как тебя зовут?\n― Меня?\n― Ну не меня же. Тебя.\n― Малыш.\n― О, Малыш... Нет, надо вот так. \nВот как меня зовут: Карлсон, который живет на крыше. Хорошо?\n― Да.\n― Но ты можешь звать меня запросто. \nТак, просто - КАрлсон.	/images/image37.jpg
41	― Ну что ты смотришь на меня? Ну почему ты меня не спросишь - сколько мне лет?\n― Ой, прости, пожалуйста, сколько тебе лет?\n― Хе... Я мужчина хоть куда - в полном расцвете сил.\n― Да-а? А в каком возрасте бывает этот расцвет сил?\n― Ну знаешь... не будем об этом говорить...	/images/image42.jpg
42	― Она все-таки упала, честное слово. Ты видел? Раз - и вдребезги.\n― Вдребезги! Вот интересно только, что скажет мама?\n― Ну мама-мама, это дело-то житейское. \nДа, потом я завтра дам тебе десять тысяч люстр. \nДавай пошалим сейчас, а?\n― Представляю, как рассердится папа...\n― Папа? А что папа?\n― ...\n― Да? Я полетел.	/images/image46.jpg
43	― Но, Карлсон, мама мне строго-настрого запретила вот... не трогать варенье.\n― Но... какой-же ты все-таки гадкий. Когда самый больной в мире человек возьмет 2-3 ложки варенья...\n― О, ты заболел?\n― Да у меня самая высокая температура в мире!\n― А-а-а...\n― Да. Если хочешь знать.	/images/image39.jpg
44	― Какой ты противный. Что ж я, заболеть чтоль не могу, как все люди?\n― А ты хочешь заболеть?\n― А ты вот не хочешь...\n― Нет.\n― Да все этого хотят! Лежишь себе...	/images/image38.jpg
45	― А у тебя есть какие-нибудь лекарства?\n― Ну какие, какие лекарства, ты же все с собой взял. Ну начинай.\n― А разве это помогает?\n― Ой... Ну начинай, сейчас увидишь... \nОй, я самый тяжелобольной, о-о-о, больной человек...	/images/image43.jpg
46	― Смотри левее, так. Видишь, вон двое идут. \nЗнаешь, кто такие? \nО, брат! Это жулики. \nОни замышляют зловещее преступление на крыше. \nУ-э-э-э! Тебе страшно? Мне нет.\n― Ну, так и есть. Что же делать?\n― О! Начинаем воспитательную работу! \nСейчас ты увидишь лучшее в мире привидение \nс мотором. Дикое... о-о-о!.. но симпатишное.\n	/images/image45.jpg
47	― Ну я так не играю. \nЯ к тебе прилетел на день варенья... \nна день, на день рожденья... Ты что, не рад, что ли?\n― Привет, Карлсон.\n― Привет, Малыш! Чем будешь угощать!\n― Пирогом!\n― С чем?\n― С восемью свечками.\n― Ну нет, это я не ем. \nЧто такое - один пирог, и восемь свечей. \nЛучше так - восемь пирогов, и одна свечка, а?	/images/image47.gif
48	А мы тут, знаете, всё плюшками балуемся… 	/images/image40.jpg
49	― Бог в помощь! Ты шо, по деревьям лазишь?\n― Да вот... птичку... хотел...\n― Ага.\n― Да я это... Гулял… гулял…\n― Ага... Выгнали?\n― ...\n― А помнишь, как ты меня гонял?\n― Так я это...\n― Ну да. Работа такая, да? \nА я всю жизнь тут мотаюсь и никто мне сам косточку не даст.\n― Так я это...\n― Теперь как я. Ха-ха-ха!	/images/image49.jpg
50	В одном селе жил когда-то пёс. \nВсю жизнь нёс он службу исправно, \nда вот состарился: и нюх не тот, \nи глаз не тот, и ноги как не свои. \nХозяева у него были люди добрые и всё терпели.	/images/image48.jpg
51	― Щас спою!!!	/images/image50.jpg
\.


--
-- TOC entry 4870 (class 0 OID 71452)
-- Dependencies: 225
-- Data for Name: level; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.level (level_id, name, description, subject) FROM stdin;
1	Уровень №1	1	1
13	Уровень №1	2	2
23	Уровень №1	3	3
2	Уровень №2	1	1
3	Уровень №3	1	1
4	Уровень №4	1	1
5	Уровень №5	1	1
6	Уровень №6	1	1
7	Уровень №7	1	1
8	Уровень №8	1	1
9	Уровень №9	1	1
10	Уровень №10	1	1
14	Уровень №2	2	2
15	Уровень №3	2	2
16	Уровень №4	2	2
17	Уровень №5	2	2
18	Уровень №6	2	2
19	Уровень №7	2	2
20	Уровень №8	2	2
21	Уровень №9	2	2
22	Уровень №10	2	2
24	Уровень №2	3	3
25	Уровень №3	3	3
26	Уровень №4	3	3
27	Уровень №5	3	3
28	Уровень №6	3	3
29	Уровень №7	3	3
30	Уровень №8	3	3
31	Уровень №9	3	3
32	Уровень №10	3	3
\.


--
-- TOC entry 4873 (class 0 OID 71462)
-- Dependencies: 228
-- Data for Name: result; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.result (level_level_id, user_user_id) FROM stdin;
\.


--
-- TOC entry 4861 (class 0 OID 70856)
-- Dependencies: 216
-- Data for Name: subject; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.subject (subject_id, name) FROM stdin;
1	Математическая статистика
2	Линейная алгебра
3	Си/С++
\.


--
-- TOC entry 4881 (class 0 OID 71615)
-- Dependencies: 236
-- Data for Name: task; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.task (task_id, correct_answer, description, subject, level_id) FROM stdin;
1	Сумма всех значений, делённая на их количество	Что такое среднее арифметическое?	1	1
2	Центральное значение в упорядоченном наборе данных	Что показывает медиана?	1	1
3	Наиболее часто встречающееся значение в выборке	Что такое мода?	1	1
4	Гистограмма	Какой график используется для отображения распределения?	1	1
5	Мера разброса данных вокруг среднего	Что такое дисперсия?	1	1
6	Квадратный корень из дисперсии	Что означает стандартное отклонение?	1	1
7	Подмножество данных из генеральной совокупности	Что такое выборка?	1	1
8	Полный набор объектов, которые изучаются	Что такое генеральная совокупность?	1	1
9	Случайная ошибка	Как называется ошибка, возникающая из-за случайных факторов?	1	1
10	Значение, которое делит данные в определённой пропорции	Что такое квантиль?	1	1
11	Разность между максимальным и минимальным значениями	Как вычислить размах выборки?	1	2
12	Отношение стандартного отклонения к среднему (в %)	Что такое коэффициент вариации?	1	2
13	Правило 1.5*IQR или z-оценка > 3	Как определить выбросы в данных?	1	2
14	Степень несимметричности распределения	Что показывает асимметрия распределения?	1	2
15	Мера остроты пика распределения	Что такое эксцесс?	1	2
16	Тест Шапиро-Уилка или Q-Q график	Как проверить нормальность распределения?	1	2
17	График для визуализации медианы, квантилей и выбросов	Что такое боксплот?	1	2
18	Q3 - Q1	Как вычислить IQR?	1	2
19	(X - μ) / σ	Что такое z-оценка?	1	2
20	Вычесть среднее и разделить на стандартное отклонение	Как стандартизировать данные?	1	2
21	Число от 0 до 1, характеризующее шанс события	Что такое вероятность события?	1	3
22	0	Какова вероятность невозможного события?	1	3
23	1	Чему равна вероятность достоверного события?	1	3
24	Вероятность события A при условии, что B уже произошло	Что такое условная вероятность?	1	3
25	P(A|B) = P(B|A)*P(A)/P(B)	Как работает формула Байеса?	1	3
26	События, где P(A|B) = P(A)	Что такое независимые события?	1	3
27	P(A) + P(B)	Как вычислить P(A или B) для несовместных событий?	1	3
28	Распределение с двумя исходами (успех/неудача)	Что такое распределение Бернулли?	1	3
29	C(n,k) * p^k * (1-p)^(n-k)	Какова формула биномиального распределения?	1	3
30	Вероятность редких событий за фиксированный интервал	Что описывает распределение Пуассона?	1	3
31	Функция вероятности для дискретных случайных величин	Что такое PMF?	1	4
32	Σ x_i * P(x_i)	Как вычислить матожидание дискретной величины?	1	4
33	Функция распределения (P(X ≤ x))	Что такое F(x)?	1	4
34	p	Чему равно матожидание Бернулли(p)?	1	4
35	n*p*(1-p)	Чему равна дисперсия Биномиального(n,p)?	1	4
36	Число испытаний до первого успеха	Когда используют геометрическое распределение?	1	4
37	Число редких событий в единицу времени	Что моделирует распределение Пуассона?	1	4
38	Пуассон — предел Биномиального при n→∞, p→0	Как связаны Биномиальное и Пуассона?	1	4
39	Вероятность k успехов в выборке без возвращения	Что такое гипергеометрическое распределение?	1	4
40	λ	Как вычислить дисперсию Пуассона(λ)?	1	4
41	Функция плотности вероятности	Что такое f(x)?	1	5
42	Интеграл от PDF на [a, b]	Как вычислить P(a ≤ X ≤ b) для непрерывной величины?	1	5
43	1	Чему равна площадь под нормальной кривой?	1	5
44	N(0, 1)	Что такое стандартное нормальное распределение?	1	5
45	Z = (X - μ)/σ	Как преобразовать X ~ N(μ,σ) в Z?	1	5
46	Сумма независимых величин стремится к нормальному распределению	Что такое центральная предельная теорема?	1	5
47	Моделирование времени между событиями	Где применяется экспоненциальное распределение?	1	5
48	z-значение для заданной вероятности	Что такое квантиль нормального распределения?	1	5
49	f(x) = 1/(b-a) на [a, b]	Как выглядит плотность равномерного распределения?	1	5
50	1/λ	Чему равно матожидание Exp(λ)?	1	5
51	Диапазон значений, в пределах которого, \nвероятно, будет находиться параметр	Какой из следующих параметров лучше всего описывает доверительный интервал?	1	6
52	Она становится шире	Что происходит с шириной доверительного интервала, \nкогда уровень достоверности повышается с 90% до 99%?	1	6
53	T-распределение	Если размер выборки невелик (n < 30) \nи стандартное отклонение генеральной совокупности неизвестно, \nкакое распределение следует использовать для расчёта доверительного интервала?	1	6
54	Она уменьшается по мере увеличения размера выборки	Какое из следующих утверждений о допустимой погрешности верно?	1	6
55	Они измеряют неопределенность и дают диапазон для оценок	Почему доверительные интервалы важны в науке о данных?	1	6
56	Выборочное среднее является точечной оценкой математического ожидания M(X), а\n выборочная дисперсия - точечной оценкой дисперсии D(X)	Какие из следующих утверждений являются верными?	1	6
57	Выполняется условие M(a∗)=a	Оценка a∗ параметра a называется несмещенной, если	1	6
58	Уменьшается	При увеличении объема выборки n и одном и том \nже уровне значимости, ширина доверительного интервала	1	6
59	Может с вероятностью  1−γ	 Может ли неизвестная дисперсия случайной величины выйти \nза границы, установленные при построении \nее доверительного интервала с доверительной вероятностью γ?	1	6
60	Предположение относительно параметров или вида закона распределения генеральной совокупности	Статистической гипотезой называют:	1	6
61	Функция, описывающая вероятность непрерывной случайной величины	Что такое функция плотности вероятности?	1	7
62	P(X ≤ x) для любой случайной величины	Что такое функция распределения?	1	7
63	f(x) = (1/√(2π)) * e^(-x²/2)	Как выглядит плотность распределения стандартного нормального распределения?	1	7
64	μ	Чему равно матожидание N(μ, σ²)?	1	7
65	Z = (X - μ)/σ	Как преобразовать X ~ N(μ, σ) в стандартное нормальное?	1	7
66	Распределение вероятностей, которое используется в статистике для составления выводов\n о среднем значении совокупности, когда размер выборки невелик\n или когда стандартное отклонение совокупности неизвестно	Что такое t-распределение(распределение Стьюдента)? Когда его используют?	1	7
67	χ² неотрицательное и асимметричное (зависит от степеней свободы).	Чем отличается χ² от нормального распределения?	1	7
68	Для моделирования времени между событиями (например, в очереди).	Где применяется экспоненциальное распределение?	1	7
69	Распределение с постоянной плотностью на [a, b]	Что такое равномерное распределение?	1	7
70	При больших n биномиальное стремится к N(np, np(1-p))	Как связаны биномиальное и нормальное распределения?	1	7
71	Линейную связь между двумя количественными переменными (-1 до 1)	Что измеряет коэффициент корреляции Пирсона?	1	8
72	|r| > 0.7	Какие значения у корреляции Пирсона указывают на сильную связь?	1	8
73	Мера совместной изменчивости двух переменных.	Что такое ковариация?	1	8
74	Да, но это ненадёжно	Может ли корреляция быть значимой при малом размере выборки?	1	8
75	Из-за возможных скрытых переменных или случайности	Почему корреляция не означает причинность?	1	8
76	Через t-тест для коэффициента корреляции (H₀: r = 0)	Как проверить значимость корреляции?	1	8
77	Доля дисперсии Y, объяснённая X (для регрессии)	Что такое коэффициент детерминации (R²)?	1	8
78	Сильная отрицательная линейная связь	Как интерпретировать r = -0.9?	1	8
79	r = 0	Какая корреляция у независимых переменных?	1	8
80	Это взаимосвязь между разными показателями в статистике	Что такое корреляция?	1	8
81	Гипотеза об отсутствии эффекта или различий, которую проверяют	Что такое нулевая гипотеза (H₀)?	1	9
82	Гипотеза, противоречащая нулевой (например, о наличии эффекта)	Что такое альтернативная гипотеза (H₁)?	1	9
83	Вероятность получить наблюдаемые данные при условии, что H₀ верна	Что такое стандартный уровень значимости?	1	9
84	< 0.05	При каком стандартном уровене значимости отвергают H₀?	1	9
85	Ложное отклонение H₀ (ложноположительный результат)	Что такое ошибка I рода?	1	9
86	Неспособность отвергнуть ложную H₀ (ложноотрицательный результат)	Что такое ошибка II рода?	1	9
87	Двухвыборочный t-тест	Какой тест используют для сравнения средних двух независимых выборок?	1	9
88	Для непараметрического сравнения двух независимых выборок	Когда применяют критерий Манна-Уитни?	1	9
89	Связь между категориальными переменными или соответствие распределения	Что проверяет критерий хи-квадрат (χ²)?	1	9
90	Вероятность отвергнуть H₀, когда она ложна (1 — β)	Что такое мощность теста?	1	9
91	Критерий Фишера точный (использует гипергеометрическое распределение), \nа χ² — асимптотический. Фишер предпочтителен для малых выборок	В чём разница между критериями Фишера и хи-квадрат для таблиц сопряжённости 2×2?	1	10
92	Критерий Левена или Бартлетта.	Как проверить гипотезу о равенстве дисперсий в трёх и более группах?	1	10
93	Матрица, где диагональные элементы — дисперсии, \nа внедиагональные — ковариации между переменными. Показывает линейные зависимости	Что такое ковариационная матрица и как её интерпретировать?	1	10
94	Это взаимосвязь между разными показателями в статистике	Что такое корреляция?	1	10
95	При больших n биномиальное стремится к N(np, np(1-p))	Как связаны биномиальное и нормальное распределения?	1	10
96	Она уменьшается по мере увеличения размера выборки	Какое из следующих утверждений о допустимой погрешности верно?	1	10
97	Z = (X - μ)/σ	Как преобразовать X ~ N(μ, σ) в стандартное нормальное?	1	10
98	Распределение вероятностей, которое используется в статистике для составления выводов\n о среднем значении совокупности, когда размер выборки невелик\n или когда стандартное отклонение совокупности неизвестно	Что такое t-распределение(распределение Стьюдента)? Когда его используют?	1	10
99	Число испытаний до первого успеха	Когда используют геометрическое распределение?	1	10
100	Число редких событий в единицу времени	Что моделирует распределение Пуассона?	1	10
101	Ортогональной	В евклидовом пространстве матрица перехода от одного ортонормированного базиса к другому\nявляется:	2	1
102	 А1 = (U^Т)АU	 В евклидовом пространстве при переходе из одного ортонормированного базиса в другой с\nматрицей перехода U формулу преобразования матрицы линейного оператора можно записать в\nвиде:	2	1
103	Линейно независимой	В линейном арифметическом пространстве система векторов е1 = (1, 0, ..., 0), \nе2  = (0, 1, 0, ..., 0), ..., еn = (0, 0, ..., 1) является:	2	1
104	Линейно зависимы	В линейном пространстве V2 любые два коллинеарных вектора	2	1
105	Линейно зависимы	В линейном пространстве V3 любые три компланарных вектора	2	1
106	4, 3, 2	В линейном пространстве К2\n[x] многочленов переменной х степени не выше второй элемент 2х^2 + 3х + 4 имеет в базисе 1, х, х^2\n координаты	2	1
107	3, 2, 5, 4	В линейном пространстве К3 [x] многочленов переменной х степени не выше третьей элемент 5х^2 + 2х + 4х^3 + 3 \nимеет в базисе 1, х, х^2, х^3 координаты:	2	1
108	единственным образом	В линейном пространстве любой вектор можно разложить по данному базису	2	1
109	 1, x, x^2	В линейном пространстве С[-1, 1] функций, непрерывных на отрезке [-1, 1], линейно независимой\nявляется система функций:	2	1
110	1, sin x, sin^2(x)	 В линейном пространстве С[0, 2p] функций, непрерывных на отрезке [0, 2p], линейно независимой\nявляется система функций:	2	1
111	ортогональны	Векторы (1, 0, 0), (0, 1, 0), (0, 0, 1) из пространства V3	2	2
112	действительные	Все корни характеристического уравнения самосопряженного оператора	2	2
113	0	Два вектора в евклидовом пространстве ортогональны, если их скалярное произведение равно	2	2
114	(х, у) <= (х, х) (у, у)	Для любых векторов х, у евклидова пространства Е справедливо неравенство Коши — Буняковского	2	2
115	|| lх || = |l| || х ||	Для нормы вектора || х || справедлива аксиома	2	2
116	|| х || >= 0	Для нормы вектора || х || справедлива аксиома	2	2
117	 а1n, а2n-1, ..., аn1	Если А = (аij) nn квадратная матрица, то побочную диагональ образуют элементы	2	2
118	В*А*	Если А и В — два линейных оператора, действующих в евклидовом пространстве Е, то оператор\n(АВ) *, сопряженный произведению этих операторов, равен:	2	2
119	не меняется	Если в какой-нибудь строке матрицы прибавить другую ее строку, умноженную на число, то\nопределитель этой матрицы	2	2
120	треугольной	Если в квадратной матрице все ее элементы, стоящие ниже или выше главной диагонали равны\nнулю, то эта матрица называется:	2	2
121	единичной	Если в матрице все элементы главной диагонали равны единице, а все остальные элементы —\nнулевые, то такая матрица называется:	2	3
122	квадратной	Если в матрице число строк равно числу ее столбцов, то такая матрица называется:	2	3
123	 || х + у || 2 = || х || 2 + || у || 2	Если векторы х и у из евклидова пространства ортогональны, то ...	2	3
124	det = 0	Если две строки матрицы равны, то ее определитель	2	3
125	ортогональный	 Если линейный оператор А, действующий в евклидовом пространстве Е, сохраняет евклидову\nнорму, то этот оператор	2	3
126	действительные	Если матрица А является симметрической, то все корни ее характеристического уравнения	2	3
127	ортогональный	Если матрица линейного оператора в некотором ортогональном базисе ортогональна, то этот\nоператор	2	3
128	det A = det B	Если матрицы А и В подобны В = Р-1АР, то ...	2	3
129	невырожденная	Если система векторов линейно независима, то ее матрица Грама	2	3
130	линейно независимая	Если собственные значения линейного оператора А: L → L попарно различны, тогда система\nсоответствующих им собственных векторов	2	3
131	перестановочными	Если существуют произведения АВ и ВА, причем АВ = ВА, то матрицы А и В называют:	2	4
132	диагональной	Если характеристическое уравнение квадратной матрицы порядка n имеет n попарно различных\nдействительных корней, то эта матрица подобна некоторой матрице	2	4
133	диагональной	 Если характеристическое уравнение линейного оператора, действующего в n-мерном линейном\nпространстве, имеет n попарно различных действительных корней, то существует базис, в котором\nматрица этого оператора является ...	2	4
134	f (x) >= 0	Квадратичная форма f (x) = xTAx, где x = (x1, ..., xn) T неотрицательно определенная, если для\nлюбого ненулевого столбца х выполняется неравенство	2	4
135	f (x) > 0	Квадратичная форма f (x) = xTAx, где x = (x1, ..., xn) T положительно определенная, если для любого\nненулевого столбца х выполняется неравенство	2	4
136	попарных произведений переменных	Квадратичная форма канонического вида не имеет в своей записи	2	4
137	det K <= 0	Квадратная матрица К называется невырожденной, если ее определитель удовлетворяет условно	2	4
138	единичная	Квадратную матрицу Q называют ортогональной, если она удовлетворяет условию QТQ = А, где\nматрица А	2	4
139	Р^(-1)АР = В	Квадратные матрицы А и В порядка n называют подобными, если существует такая\nневырожденная матрица Р, что ...	2	4
140	скалярное произведение	Линейный оператор А, действующий в евклидовом пространстве Е, называют ортогональным\nоператором, если он сохраняет в Е	2	4
141	(Ах, у) = (х, А*у)	Линейный оператор А*: Е → Е называется сопряженным к линейному оператору А: Е → Е, если для\nлюбых векторов х, у Î Е верно равенство	2	5
142	 линейно независима	Любая ортогональная система ненулевых векторов	2	5
290	Нельзя принудительно, только через флаги	Как остановить поток?	3	9
143	диагональной	Любая симметрическая матрица М порядка n подобна некоторой	2	5
144	рангом матрицы	Максимальное число линейно независимых вектор-столбцов (строк) называется:	2	5
145	собственными для А	Матрица линейного оператора А, действующего в некотором линейном пространстве, является в\nданном базисе диагональной тогда и только тогда, когда все векторы этого базиса являются ...	2	5
146	A^(-1)	Матрицей линейного оператора, обратного оператору А, действующему в линейном\nпространстве L и имеющему в некотором базисе матрицу А, будет в том же базисе матрица	2	5
147	Гаусса	Метод приведения матриц к ступенчатому виду с помощью элементарных преобразований 1-го и\n2-го типа называют методом	2	5
148	линейным подпространством	Множество собственных векторов, отвечающих собственному значению l линейного оператора А:\nL → L, является в L	2	5
149		Нормированное пространство — это линейное пространство, в котором задана норма	2	5
150	произведению определителей этих матриц	Определитель произведения двух квадратных матриц одного порядка равен:	2	5
151	Линейное пространство со скалярным произведением	Что такое евклидово пространство?	2	6
152	√(x,x)	Как вычислить норму вектора?	2	6
153	Базис из попарно ортогональных единичных векторов	Что такое ортонормированный базис?	2	6
154	Алгоритм построения ортогонального базиса	Процесс ортогонализации Грама-Шмидта?	2	6
155	Множество векторов, ортогональных данному подпространству	Что такое ортогональное дополнение?	2	6
156	(v,eᵢ)eᵢ для ортонормированного базиса	Как найти проекцию вектора?	2	6
157	Комплексный аналог евклидова пространства	Что такое унитарное пространство?	2	6
158	Билинейная симметричная положительно определённая форма	Как задать скалярное произведение?	2	6
159	|(x,y)| ≤ ||x||·||y||	Что такое неравенство Коши-Буняковского?	2	6
160	arccos((x,y)/(||x||·||y||))	Что такое угол между векторами?	2	6
161	Однородный многочлен второй степени	Что такое квадратичная форма?	2	7
162	xᵀAx	Как записать в матричном виде?	2	7
163	Сумма квадратов с коэффициентами	Что такое канонический вид?	2	7
164	Последовательное выделение полных квадратов	Метод Лагранжа приведения?	2	7
165	(p,q) - число положительных и отрицательных квадратов	Что такое сигнатура?	2	7
166	Сигнатура не зависит от способа приведения	Закон инерции?	2	7
167	Когда все собственные значения > 0	Когда форма положительно определена?	2	7
168	Положительность всех угловых миноров	Критерий Сильвестра?	2	7
169	Функция B(x,y), линейная по каждому аргументу	Что такое билинейная форма?	2	7
170	Q(x) = B(x,x)	Как связаны билинейные и квадратичные формы?	2	7
171	Пространство, связанное с векторным пространством	Что такое аффинное пространство?	2	8
172	Точка + базис	Как задать аффинную систему координат?	2	8
173	Отображение, сохраняющее барицентрические комбинации	Что такое аффинное отображение?	2	8
174	Множество барицентрических комбинаций точек	Как задать аффинную оболочку?	2	8
175	Минимальное выпуклое множество, содержащее точки	Что такое выпуклая оболочка?	2	8
176	Отрезок между любыми точками принадлежит множеству	Как проверить выпуклость?	2	8
177	Выпуклая оболочка n+1 аффинно независимых точек	Что такое симплекс?	2	8
178	Решить систему уравнений	Как найти барицентрические координаты?	2	8
179	Группа аффинных преобразований	Что такое аффинная группа?	2	8
180	Изометрическое аффинное преобразование	Как задать движение?	2	8
181	Многомерное обобщение векторов и матриц	Что такое тензор?	2	9
182	Элемент пространства V^p ⊗ (V*)^q	Как задать тензор валентности (p,q)?	2	9
183	Операция по паре индексов	Что такое свертка?	2	9
184	Тензорное произведение	Как умножить тензоры?	2	9
185	Тензор, инвариантный к перестановке индексов	Что такое симметричный тензор?	2	9
186	Тензор, меняющий знак при перестановке индексов	Что такое кососимметричный тензор?	2	9
187	Билинейная форма gᵢⱼ	Как задать метрический тензор?	2	9
188	Тензор, характеризующий кривизну многообразия	Что такое тензор кривизны?	2	9
189	С помощью метрического тензора	Как поднимать и опускать индексы?	2	9
190	Кососимметричный тензор специального вида	Что такое символ Леви-Чивиты?	2	9
191	Преобразования координат, 3D-рендеринг	Применение в компьютерной графике?	2	10
192	Матричные операции, PCA, SVD	Использование в машинном обучении?	2	10
193	Гильбертовы пространства, операторы	Роль в квантовой механике?	2	10
194	Матричные шифры, решетки	Применение в криптографии?	2	10
195	Линейные модели, Леонтьевский баланс	Использование в экономике?	2	10
196	Матричные игры, стратегии	Роль в теории игр?	2	10
197	Тензорные поля, теория относительности	Применение в физике?	2	10
198	Ковариационные матрицы, регрессия	Использование в статистике?	2	10
199	Линейные коды, матрицы проверок	Роль в теории кодирования?	2	10
200	Кинематика, преобразования координат	Применение в робототехнике?	2	10
201	Увеличивает значение переменной на 1	Что делает оператор "++" в C++?	3	1
202	int x;	Как объявить целочисленную переменную в C?	3	1
203	2	Что выведет код: `printf("%d", 5 / 2);` в C?	3	1
204	char	Какой тип данных используется для символов в C++?	3	1
205	Проверяет равенство значений	Что делает оператор "=="?	3	1
206	cin >> x;	Как прочитать число с клавиатуры в C++?	3	1
207	Главная функция, с которой начинается выполнение	Что такое "main()" в программе на C?	3	1
208	const int x = 5;	Как объявить константу в C++?	3	1
209	HelloWorld	Что выведет код: `cout << "Hello" << "World";`?	3	1
210	%	Какой оператор используется для взятия остатка от деления?	3	1
211	Выполняет блок кода по условию	Как работает оператор "if-else"?	3	2
212	012	Что выведет код: `for(int i=0; i<3; i++) { cout << i; }`?	3	2
213	break;	Как прервать цикл "for" досрочно?	3	2
214	Выбирает вариант выполнения из нескольких условий	Что делает оператор "switch"?	3	2
215	&&	Как записать условие "И" в C++?	3	2
216	Ничего (условие ложно)	Что выведет код: `while(false) { cout << "Hi"; }`?	3	2
217	continue;	Как пропустить текущую итерацию цикла?	3	2
218	Условный оператор: `условие ? a : b`	Что такое "тернарный оператор"?	3	2
219	||	Как проверить "ИЛИ" в условии?	3	2
220	do-while	Какой цикл выполнится хотя бы один раз?	3	2
221	int arr[10];	Как объявить массив из 10 целых чисел?	3	3
222	strlen(str);	Как получить длину строки в C?	3	3
223	Символ \\0, обозначающий конец строки	Что такое "нуль-терминатор" в строках C?	3	3
224	strcpy(dest, src);	Как скопировать строку в C?	3	3
225	2	Что выведет код: `int arr[] = {1,2}; cout << arr[1];`?	3	3
226	int arr[3][3];	Как объявить двумерный массив 3x3?	3	3
227	strcmp(str1, str2);	Как сравнить две строки в C?	3	3
228	Класс для работы со строками	Что такое "std::string" в C++?	3	3
229	stoi(str);	Как конвертировать строку в число в C++?	3	3
230	Создаёт указатель на строковый литерал	Что делает `char* ptr = "text";`?	3	3
231	Переменная, хранящая адрес другой переменной	Что такое указатель в C?	3	4
232	&x	Как получить адрес переменной?	3	4
233	5	Что выведет код: `int x=5; int* p=&x; cout << *p;`?	3	4
234	Получение значения по адресу (*p)	Что такое "разыменование указателя"?	3	4
235	int& ref = x;	Как объявить ссылку в C++?	3	4
236	Память, выделяемая в куче (new/delete)	Что такое "динамическая память" в C++?	3	4
237	free(ptr);	Как освободить память в C?	3	4
238	Неосвобождённая динамическая память	Что такое "утечка памяти"?	3	4
239	Ссылка не может быть null и не требует разыменования	Чем отличается указатель от ссылки?	3	4
240	Выделяет память в куче	Что делает оператор "new" в C++?	3	4
241	int func(int x);	Как объявить функцию в C?	3	5
242	Параметр со значением: `void f(int x=0)`	Что такое "аргумент по умолчанию" в C++?	3	5
243	Через указатель: `void f(int* arr)`	Как передать массив в функцию?	3	5
244	Функция, вызывающая саму себя	Что такое "рекурсия"?	3	5
245	6	Что выведет код: `int f(int n) { return n <= 1 ? 1 : n * f(n-1); } cout << f(3);`?	3	5
246	Через указатели/ссылки или структуру	Как вернуть несколько значений из функции?	3	5
247	Несколько функций с одним именем, но разными параметрами	Что такое "перегрузка функций"?	3	5
248	Функция, работающая с разными типами: `template <typename T>`	Что такое "шаблон функции"?	3	5
249	void f(int& x);	Как передать параметр по ссылке?	3	5
250	Функция, встраиваемая компилятором (ускоряет выполнение)	Что такое "inline-функция"?	3	5
251	struct S { int x; };	Как объявить структуру в C?	3	6
252	Тип данных, объединяющий поля и методы	Что такое "класс" в C++?	3	6
253	В struct поля по умолчанию public, в class — private	Чем отличается struct от class в C++?	3	6
254	Метод, вызываемый при создании объекта	Что такое "конструктор"?	3	6
255	~ClassName();	Как объявить деструктор?	3	6
256	Сокрытие данных (private-поля)	Что такое "инкапсуляция"?	3	6
257	s.x; (где s — объект)	Как обратиться к полю структуры?	3	6
258	Указатель на текущий объект	Что такое "this" в C++?	3	6
259	static int x;	Как объявить статическое поле класса?	3	6
260	Функция, имеющая доступ к private-полям класса	Что такое "дружественная функция"?	3	6
261	Создание класса на основе существующего	Что такое "наследование"?	3	7
262	class Derived : public Base	Как объявить наследование в C++?	3	7
263	Возможность объектов вести себя по-разному (через virtual)	Что такое "полиморфизм"?	3	7
264	Для переопределения метода в производном классе	Для чего нужно ключевое слово "virtual"?	3	7
265	Класс с хотя бы одним pure virtual-методом (`= 0`)	Что такое "абстрактный класс"?	3	7
266	final	Как запретить переопределение метода?	3	7
267	Класс, наследуемый от нескольких базовых	Что такое "множественное наследование"?	3	7
268	Base::method();	Как вызвать метод базового класса?	3	7
269	Абстрактный класс только с pure virtual-методами	Что такое "интерфейс" в C++?	3	7
270	Явно указывает на переопределение virtual-метода	Что делает "override"?	3	7
271	Динамический массив (std::vector)	Что такое "вектор" в C++?	3	8
272	v.push_back(x);	Как добавить элемент в вектор?	3	8
273	Хранит пары ключ-значение (словарь)	Что делает "std::map"?	3	8
274	std::sort(v.begin(), v.end());	Как отсортировать вектор?	3	8
275	Объект для доступа к элементам контейнера	Что такое "итератор"?	3	8
276	std::find(v.begin(), v.end(), x);	Как найти элемент в векторе?	3	8
277	Анонимная функция: `[]() { ... }`	Что такое "лямбда-функция"?	3	8
278	Умный указатель с автоматическим удалением	Как работает "std::unique_ptr"?	3	8
279	Контейнер для двух элементов (first, second)	Что такое "std::pair"?	3	8
280	std::string s;	Как объявить строку в C++ (STL)?	3	8
281	std::thread t(func);	Как создать поток в C++11?	3	9
282	Взаимная блокировка потоков	Что такое "deadlock"?	3	9
283	Мьютекс (std::mutex)	Как защитить общие данные?	3	9
284	Запускает асинхронную задачу	Что делает "std::async"?	3	9
285	Механизм ожидания события между потоками	Что такое "condition_variable"?	3	9
286	Через аргументы функции: `thread t(func, arg)`	Как передать данные в поток?	3	9
287	Несинхронизированный доступ к данным из потоков	Что такое "data race"?	3	9
288	future.get();	Как получить результат из std::future?	3	9
289	RAII-обёртка для мьютекса (автоматический unlock)	Что делает "std::lock_guard"?	3	9
291	Обобщённое программирование (template)	Что такое "шаблоны" в C++?	3	10
292	Превращает объект в rvalue (для перемещения)	Что делает "std::move"?	3	10
293	Передача аргументов без потери категории (std::forward)	Что такое "perfect forwarding"?	3	10
294	Вычисление на этапе компиляции	Как работает "constexpr"?	3	10
295	Получение ресурса — это инициализация (умные указатели)	Что такое "RAII"?	3	10
296	Для инициализации объектов списком значений	Для чего нужен "std::initializer_list"?	3	10
297	Substitution Failure Is Not An Error (отказ перегрузки)	Что такое "SFINAE"?	3	10
298	Хранит один из нескольких типов (типобезопасный union)	Как работает "std::variant"?	3	10
299	Объект для управления памятью в контейнерах	Что такое "аллокатор"?	3	10
300	Указывает, что функция не генерирует исключений	Как ускорить код с помощью "noexcept"?	3	10
\.


--
-- TOC entry 4879 (class 0 OID 71598)
-- Dependencies: 234
-- Data for Name: user_achievement; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.user_achievement (user_id, achievement_id) FROM stdin;
2	6
2	9
2	12
2	8
2	11
\.


--
-- TOC entry 4876 (class 0 OID 71494)
-- Dependencies: 231
-- Data for Name: user_subject_progress; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.user_subject_progress (user_id, subject_id, opened_levels) FROM stdin;
1	1	1
1	2	1
2	1	1
2	3	10
2	2	10
1	3	2
\.


--
-- TOC entry 4875 (class 0 OID 71485)
-- Dependencies: 230
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.users (user_id, login, password, opened_levels) FROM stdin;
1	zary	134	1
2	zar	123	1
\.


--
-- TOC entry 4898 (class 0 OID 0)
-- Dependencies: 220
-- Name: achievements_achievement_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.achievements_achievement_id_seq', 13, true);


--
-- TOC entry 4899 (class 0 OID 0)
-- Dependencies: 222
-- Name: incorrect_answers_answer_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.incorrect_answers_answer_id_seq', 1512, true);


--
-- TOC entry 4900 (class 0 OID 0)
-- Dependencies: 217
-- Name: joke_joke_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.joke_joke_id_seq', 10, true);


--
-- TOC entry 4901 (class 0 OID 0)
-- Dependencies: 219
-- Name: joke_joke_id_seq1; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.joke_joke_id_seq1', 1, false);


--
-- TOC entry 4902 (class 0 OID 0)
-- Dependencies: 224
-- Name: level_level_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.level_level_id_seq', 32, true);


--
-- TOC entry 4903 (class 0 OID 0)
-- Dependencies: 226
-- Name: result_level_level_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.result_level_level_id_seq', 1, false);


--
-- TOC entry 4904 (class 0 OID 0)
-- Dependencies: 227
-- Name: result_user_user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.result_user_user_id_seq', 1, false);


--
-- TOC entry 4905 (class 0 OID 0)
-- Dependencies: 215
-- Name: subject_subject_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.subject_subject_id_seq', 1, false);


--
-- TOC entry 4906 (class 0 OID 0)
-- Dependencies: 235
-- Name: task_task_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.task_task_id_seq', 300, true);


--
-- TOC entry 4907 (class 0 OID 0)
-- Dependencies: 233
-- Name: user_achievement_achievements_achievement_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.user_achievement_achievements_achievement_id_seq', 1, false);


--
-- TOC entry 4908 (class 0 OID 0)
-- Dependencies: 232
-- Name: user_achievement_user_user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.user_achievement_user_user_id_seq', 1, false);


--
-- TOC entry 4909 (class 0 OID 0)
-- Dependencies: 229
-- Name: users_user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.users_user_id_seq', 2, true);


--
-- TOC entry 4696 (class 2606 OID 71441)
-- Name: achievements achievements_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.achievements
    ADD CONSTRAINT achievements_pkey PRIMARY KEY (achievement_id);


--
-- TOC entry 4698 (class 2606 OID 71450)
-- Name: incorrect_answers incorrect_answers_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.incorrect_answers
    ADD CONSTRAINT incorrect_answers_pkey PRIMARY KEY (answer_id);


--
-- TOC entry 4694 (class 2606 OID 71239)
-- Name: joke joke_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.joke
    ADD CONSTRAINT joke_pkey PRIMARY KEY (joke_id);


--
-- TOC entry 4700 (class 2606 OID 71459)
-- Name: level level_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.level
    ADD CONSTRAINT level_pkey PRIMARY KEY (level_id);


--
-- TOC entry 4692 (class 2606 OID 70932)
-- Name: subject subject_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.subject
    ADD CONSTRAINT subject_pkey PRIMARY KEY (subject_id);


--
-- TOC entry 4706 (class 2606 OID 71622)
-- Name: task task_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.task
    ADD CONSTRAINT task_pkey PRIMARY KEY (task_id);


--
-- TOC entry 4702 (class 2606 OID 71493)
-- Name: users user_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT user_pkey PRIMARY KEY (user_id);


--
-- TOC entry 4704 (class 2606 OID 71499)
-- Name: user_subject_progress user_subject_progress_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_subject_progress
    ADD CONSTRAINT user_subject_progress_pkey PRIMARY KEY (user_id, subject_id);


--
-- TOC entry 4713 (class 2606 OID 71609)
-- Name: user_achievement achievement_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_achievement
    ADD CONSTRAINT achievement_id_fkey FOREIGN KEY (achievement_id) REFERENCES public.achievements(achievement_id) NOT VALID;


--
-- TOC entry 4707 (class 2606 OID 71623)
-- Name: incorrect_answers fk_task; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.incorrect_answers
    ADD CONSTRAINT fk_task FOREIGN KEY (task_id) REFERENCES public.task(task_id);


--
-- TOC entry 4708 (class 2606 OID 71515)
-- Name: level level_subject_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.level
    ADD CONSTRAINT level_subject_fkey FOREIGN KEY (subject) REFERENCES public.subject(subject_id) NOT VALID;


--
-- TOC entry 4709 (class 2606 OID 71520)
-- Name: result result_level_level_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.result
    ADD CONSTRAINT result_level_level_id_fkey FOREIGN KEY (level_level_id) REFERENCES public.level(level_id) NOT VALID;


--
-- TOC entry 4710 (class 2606 OID 71525)
-- Name: result result_user_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.result
    ADD CONSTRAINT result_user_user_id_fkey FOREIGN KEY (user_user_id) REFERENCES public.users(user_id) NOT VALID;


--
-- TOC entry 4715 (class 2606 OID 71638)
-- Name: task task_level_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.task
    ADD CONSTRAINT task_level_id_fkey FOREIGN KEY (level_id) REFERENCES public.level(level_id) NOT VALID;


--
-- TOC entry 4716 (class 2606 OID 71628)
-- Name: task task_subject_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.task
    ADD CONSTRAINT task_subject_fkey FOREIGN KEY (subject) REFERENCES public.subject(subject_id) NOT VALID;


--
-- TOC entry 4714 (class 2606 OID 71604)
-- Name: user_achievement user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_achievement
    ADD CONSTRAINT user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(user_id) NOT VALID;


--
-- TOC entry 4711 (class 2606 OID 71505)
-- Name: user_subject_progress user_subject_progress_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_subject_progress
    ADD CONSTRAINT user_subject_progress_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.subject(subject_id);


--
-- TOC entry 4712 (class 2606 OID 71500)
-- Name: user_subject_progress user_subject_progress_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_subject_progress
    ADD CONSTRAINT user_subject_progress_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(user_id);


-- Completed on 2025-05-22 15:12:30

--
-- PostgreSQL database dump complete
--

